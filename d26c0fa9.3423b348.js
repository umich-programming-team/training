(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{82:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return s})),r.d(t,"default",(function(){return p}));var n=r(2),o=r(6),a=(r(0),r(92)),i={id:"stl-sort",title:"Solving Problems with std::sort()",sidebar_label:"1.2 STL Sort"},c={unversionedId:"01-sorting-and-searching/stl-sort",id:"01-sorting-and-searching/stl-sort",isDocsHomePage:!1,title:"Solving Problems with std::sort()",description:"There are many problems (either programming challenges or mathematical pizzles) that have an effiecient solution when the data are listed and stored in order. In this subsection, we introduce three ad-hoc simple exmaples where there are elegant solutions with sorting.",source:"@site/docs/01-sorting-and-searching/stl-sort.mdx",slug:"/01-sorting-and-searching/stl-sort",permalink:"/training/docs/01-sorting-and-searching/stl-sort",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/01-sorting-and-searching/stl-sort.mdx",version:"current",sidebar_label:"1.2 STL Sort",sidebar:"docs",previous:{title:"Arrays and STL Containers",permalink:"/training/docs/01-sorting-and-searching/arrays-and-containers"},next:{title:"Document Number 2",permalink:"/training/docs/doc2"}},s=[{value:"Exmaple: [CF1248B] Grow The Tree",id:"exmaple-cf1248b-grow-the-tree",children:[]},{value:"Example: [CF1312B] Bogosort",id:"example-cf1312b-bogosort",children:[]},{value:"Example: [CF1418B] Negative Prefixes",id:"example-cf1418b-negative-prefixes",children:[]}],l={rightToc:s};function p(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"There are many problems (either programming challenges or mathematical pizzles) that have an effiecient solution when the data are listed and stored in order. In this subsection, we introduce three ad-hoc simple exmaples where there are elegant solutions with sorting."),Object(a.b)("h3",{id:"exmaple-cf1248b-grow-the-tree"},"Exmaple: ",Object(a.b)("a",Object(n.a)({parentName:"h3"},{href:"https://codeforces.com/problemset/problem/1248/B"}),"[CF1248B] Grow The Tree")),Object(a.b)("p",null,"Sometimes you can pass in your custom comparator to the sorting function."),Object(a.b)("h3",{id:"example-cf1312b-bogosort"},"Example: ",Object(a.b)("a",Object(n.a)({parentName:"h3"},{href:"https://codeforces.com/problemset/problem/1312/B"}),"[CF1312B] Bogosort")),Object(a.b)("h3",{id:"example-cf1418b-negative-prefixes"},"Example: ",Object(a.b)("a",Object(n.a)({parentName:"h3"},{href:"https://codeforces.com/problemset/problem/1418/B"}),"[CF1418B] Negative Prefixes")),Object(a.b)("hr",null),Object(a.b)("p",null,"If we have an sorted array, then searching for a specific key becomes a common and important question. The most common algorithm that searches for a key in a sorted array is through ",Object(a.b)("strong",{parentName:"p"},"binary search"),".\nHowever, a correct implementation of a binary search could sometimes become very challenging. Fortunately we have ",Object(a.b)("inlineCode",{parentName:"p"},"std::lower_bound()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"std::upper_bound()")," functions provided by C++ standard library."))}p.isMDXComponent=!0},92:function(e,t,r){"use strict";r.d(t,"a",(function(){return m})),r.d(t,"b",(function(){return b}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=o.a.createContext({}),p=function(e){var t=o.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},m=function(e){var t=p(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=n,b=m["".concat(i,".").concat(d)]||m[d]||u[d]||a;return r?o.a.createElement(b,c(c({ref:t},l),{},{components:r})):o.a.createElement(b,c({ref:t},l))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var l=2;l<a;l++)i[l]=r[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);