(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));var a=t(2),r=t(6),i=(t(0),t(92)),o={id:"arrays-and-containers",title:"Arrays and STL Containers",sidebar_label:"1.1 STL Containers"},s={unversionedId:"01-sorting-and-searching/arrays-and-containers",id:"01-sorting-and-searching/arrays-and-containers",isDocsHomePage:!1,title:"Arrays and STL Containers",description:"The goal of reading this subsection is to convince you that using C++ STL containers is beneficial to competitive programming.",source:"@site/docs/01-sorting-and-searching/arrays-and-containers.mdx",slug:"/01-sorting-and-searching/arrays-and-containers",permalink:"/training/docs/01-sorting-and-searching/arrays-and-containers",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/01-sorting-and-searching/arrays-and-containers.mdx",version:"current",sidebar_label:"1.1 STL Containers",sidebar:"docs",previous:{title:"Format of Training Sections",permalink:"/training/docs/00-introduction/format-of-sections"},next:{title:"Solving Problems with std::sort()",permalink:"/training/docs/01-sorting-and-searching/stl-sort"}},c=[{value:"Reason 1: Containers Have Lengths Info",id:"reason-1-containers-have-lengths-info",children:[{value:"Example: [CF1399A] Remove Smallest",id:"example-cf1399a-remove-smallest",children:[]}]},{value:"Reason 2: Containers Could Have Iterators",id:"reason-2-containers-could-have-iterators",children:[{value:"Example: [CF1220A] Cards",id:"example-cf1220a-cards",children:[]}]}],l={rightToc:c};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The goal of reading this subsection is to convince you that using C++ STL containers is beneficial to competitive programming."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"Summary")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Use static or size-fixed arrays, or STL vectors."))),Object(i.b)("p",null,"Now, I will introduce two reasons for using STL containers."),Object(i.b)("h2",{id:"reason-1-containers-have-lengths-info"},"Reason 1: Containers Have Lengths Info"),Object(i.b)("p",null,"Once you have a container, you can use ",Object(i.b)("inlineCode",{parentName:"p"},"std::sort()")," to sort them."),Object(i.b)("h3",{id:"example-cf1399a-remove-smallest"},"Example: ",Object(i.b)("a",Object(a.a)({parentName:"h3"},{href:"https://codeforces.com/problemset/problem/1399/A"}),"[CF1399A] Remove Smallest")),Object(i.b)("h4",{id:"short-description"},"Short Description"),Object(i.b)("p",null,"You are given an array of ",Object(i.b)("span",Object(a.a)({parentName:"p"},{className:"math math-inline"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"n")),Object(i.b)("annotation",Object(a.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"n")))),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}})),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord mathnormal"}),"n")))))," positive integers. Each time you can choose two integers where their absolute difference is no more than ",Object(i.b)("span",Object(a.a)({parentName:"p"},{className:"math math-inline"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mn",{parentName:"mrow"},"1")),Object(i.b)("annotation",Object(a.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"1")))),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(i.b)("span",Object(a.a)({parentName:"span"},{className:"mord"}),"1"))))),", and eliminate the smaller one. Answer ",Object(i.b)("inlineCode",{parentName:"p"},"YES")," if there is a way to eliminate integers until exactly one number left."),Object(i.b)("h4",{id:"solution"},"Solution"),Object(i.b)("p",null,"If there is a way to eliminate all but one integer, then the remaining one must be of the largest value. Thus, we can sort the array and see if for any non-largest integer can be eliminated."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"#include <bits/stdc++.h>\nusing namespace std;\n\nvoid solve() {\n    int n;\n    cin >> n;\n    \n    // Declare an array of size n dynamically.\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) cin >> a[i];\n\n    sort(a.begin(), a.end());\n    for (int i = 0; i < n - 1; i++) {\n        if (a[i + 1] > a[i] + 1) {\n            cout << \"NO\" << '\\n';\n            return;\n        }\n    }\n    cout << \"YES\" << '\\n';\n    return;\n}\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) solve();\n    return 0;\n}\n")),Object(i.b)("h2",{id:"reason-2-containers-could-have-iterators"},"Reason 2: Containers Could Have Iterators"),Object(i.b)("p",null,"Using the iterators, your code looks more simpler and easier to understand.\nThis is super helpful when you are using ranged for-loops."),Object(i.b)("h3",{id:"example-cf1220a-cards"},"Example: ",Object(i.b)("a",Object(a.a)({parentName:"h3"},{href:"https://codeforces.com/problemset/problem/1220/A"}),"[CF1220A] Cards")),Object(i.b)("h4",{id:"short-description-1"},"Short Description"),Object(i.b)("p",null,"You are given a ",Object(i.b)("strong",{parentName:"p"},"shuffled")," string from reading a sequence of binary digits in English. Restore the maximum possible number in binary notation."),Object(i.b)("h4",{id:"solution-1"},"Solution"),Object(i.b)("p",null,"We notice that the number of ",Object(i.b)("inlineCode",{parentName:"p"},"z")," characters represents the number of zeros, and the number of ",Object(i.b)("inlineCode",{parentName:"p"},"n")," characters represents the number of ones. Hence, our algorithm starts with counting the number of such charaters, and output all the ",Object(i.b)("inlineCode",{parentName:"p"},"1"),"'s before ",Object(i.b)("inlineCode",{parentName:"p"},"0"),"'s."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),"#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    int n;\n    string S;\n    cin >> n >> S;\n\n    int count_z = 0, count_n = 0;\n    // Here we use a ranged for-loop over a container.\n    for (char x : S) {\n        if (x == 'z') count_z++;\n        if (x == 'n') count_n++;\n    }\n    for (int i = 0; i < count_n; ++i) cout << \"1 \";\n    for (int i = 0; i < count_z; ++i) cout << \"0 \";\n    cout << endl;\n    return 0;\n}\n")),Object(i.b)("p",null,"Note: on Codeforces, the autograder allows you to print a trailing space at the end of the line. This might not pass on the other online judges."),Object(i.b)("p",null,"With these handy containers in C++, we are able to apply sorting to lots of challenges in a very handy way!"))}b.isMDXComponent=!0},92:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),b=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=b(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(t),u=a,d=p["".concat(o,".").concat(u)]||p[u]||m[u]||i;return t?r.a.createElement(d,s(s({ref:n},l),{},{components:t})):r.a.createElement(d,s({ref:n},l))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);